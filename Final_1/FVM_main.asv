clc
clear 
close all

%% Initialize variables
Init_flow
InitFVM

dimX = 30;
dimY = 30;

% Physical properties of nozzle
D_t = 0.15;                 % Throat Diameter: 15cm 
A_t = pi*(D_t^2)/4;         % Throat Area

%% initialize spatial Matrix T
M_solid1 = zeros(dimY,dimX);
M_flow = zeros(dimY,dimX);
M_solid2 = zeros(dimY,dimX);
%% set up the mesh

R = 1;
h1 = 0.1;
h2 = 0.1;
h3 = 0.1;

[X_solid1, Y_solid1] = circular_mesh(M_solid1, R ,h1, 10);
[X_flow, Y_flow] = circular_mesh(M_flow, R+h1 ,h2, 10);
[X_solid2, Y_solid2] = circular_mesh(M_solid2, R+h1+h2 ,h3, 10);

Y_SOLID = [Y_solid2; Y_flow; Y_solid1];
Y_SOLID([size(M_solid2,1), size(M_solid2,1)+size(M_flow,1)],:) = [];
Y_SOLID = flip(Y_SOLID,2);

X_SOLID = -[X_solid2; X_flow; X_solid1];
X_SOLID([size(M_solid2,1), size(M_solid2,1)+size(M_flow,1)],:) = [];
X_SOLID = flip(X_SOLID,2);
M_SOLID = zeros(size(Y_SOLID));


% [X_solid1, Y_solid1] = setUpMesh(M_solid1, l_solid1, formfunction_solid1);
% [X_solid2, Y_solid2] = setUpMesh(M_solid1, l_solid1, formfunction_solid1);
% [X_flow, Y_flow] = setUpMesh(M_flow, l_flow, formfunction_flow);
% Y_flow = Y_flow + Y_solid1(1,:);
% Y_solid2 = Y_solid2 + Y_flow(1,:);
% X_SOLID = [X_solid2; X_flow; X_solid1] - X_solid1(1,end);
% X_SOLID([size(M_solid2,1), size(M_solid2,1)+size(M_flow,1)],:) = [];

% Y_SOLID = [Y_solid2; Y_flow; Y_solid1];
% Y_SOLID([size(M_solid2,1), size(M_solid2,1)+size(M_flow,1)],:) = [];
% M_SOLID = zeros(size(Y_SOLID));

%% Solving velocity part of flow
u = solveFVM_velocity(M_flow, X_flow, Y_flow);

%% Developing Temperature Profile for flow
T_prev = 100*ones(dimY,dimX);

%% Iterating 

% Initial guess for Tw_gas_solid wall temperature (ignoring corners)
Tw_gas = 1000.*ones(1,size(M_solid1,2)+size(M_SOLID,2));
Tw_gas_solid1 = Tw_gas(1,end - size(M_solid1,2) + 1:end);
Tw_gas_SOLID = Tw_gas(1, 1:size(M_SOLID,2));

% Initial guess for Tw_solid_flow wall temperature
Tw_solid1_flow = 900.*ones(1,size(M_flow,2));

% Initial guess for Tw_solid_flow wall temperature
Tw_flow_solid2 = 500.*ones(1,size(M_flow,2));

% Initial guess for Tw_SOLID_right wall temperature
Tw_SOLID = 900.*ones(1,size(M_SOLID,1))';

eps = 1;                           % For stopping criteria

max_Tw_gas_solid1_h = zeros(1,100);              % Storing the max value of temperature at gas_solid wall on hot side       
max_Tw_gas_solid1_s = zeros(1,100);              % Storing the max value of temperature at gas_solid wall on solid side 
max_Tw_solid1_flow_s = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on solid side 
max_Tw_solid1_flow_f = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on flow side 
max_Tw_flow_solid2_s = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on solid side 
max_Tw_flow_solid2_f = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on flow side 
max_Tw_SOLID_left = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on solid side 
max_Tw_SOLID_right = zeros(1,100);             % Storing the max value of temperature at solid_flow wall on flow side 

fprintf('__________________________________________________________________________\n');
fprintf('                                Residuals                                 \n');
fprintf('__________________________________________________________________________\n\n');
fprintf('Iteration\t|\tGas-Solid1\t|\tSolid1_Flow\t|\tFlow-Solid2\t|\tSOLID-right\n');
figure(1)
hold on;

residuals = [];
for iter = 1:100

    % Solving the Solid1 first, assuming some wall temperature 
    solid_type = "solid1";
    Tw_gas_solid1_h = Tw_gas_solid1;                                   % For the purpose of comparing the hotter and colder wall sides
    Tw_solid1_flow_s = Tw_solid1_flow;                                 % For the purpose of comparing the solid and flow wall sides
    Q_gas_solid1 = 1e-5.*heat_flux(10*A_t, A_t, Tw_gas_solid1_h);      % Heat flux at every southern node of solid1 except corners
    Tw_solid1_SOLID = Tw_SOLID(end-dimY+1:end);                   % Temperature at interface of solid1 and SOLID
    [T_solid1, Q_solid1_flow, Q_solid1_SOLID] = solveFVM(solid_type, M_solid1, X_solid1, Y_solid1, Tw_solid1_flow_s, Tw_solid1_SOLID, Q_gas_solid1, [] );
    T_solid1 = real(T_solid1);
    
    Tw_gas_solid1_s = T_solid1(end,:);                                % Extracting the temp at southern nodes in solid domain
    Tw_gas_solid1 = Tw_gas_solid1_s;       

    max_Tw_gas_solid1_h(iter) = max(Tw_gas_solid1_h);                  % Storing the max value of temp at hot side in max_Tw_h vector
    max_Tw_gas_solid1_s(iter) = max(Tw_gas_solid1_s);                  % Storing the max value of temp at solid side in max_Tw_c vector


    % Solving the flow part assuming some wall temperature of solid1+flow
    Tw_flow_solid2_f = Tw_flow_solid2;
    [T_flow, Q_flow_solid2, Q_flow_SOLID] = solveFVM_temp(M_flow, X_flow, Y_flow, T_prev, u, Q_solid1_flow, Tw_flow_solid2_f, Tw_SOLID(dimY + 1:2*dimY));
    T_flow = real(T_flow);
    Tw_solid1_flow_f = T_flow(end,:);
    Tw_solid1_flow = Tw_solid1_flow_f ;

    max_Tw_solid1_flow_s(iter) = max(Tw_solid1_flow_s);                  % Storing the max value of temp at hot side in max_Tw_h vector
    max_Tw_solid1_flow_f(iter) = max(Tw_solid1_flow_f);                  % Storing the max value of temp at solid side in max_Tw_c vector


    % Solid type Solid2
    solid_type = "solid2";
    Tw_solid2_SOLID = Tw_SOLID(1:dimY);
    [T_solid2, ~, Q_solid2_SOLID] = solveFVM(solid_type, M_solid2, X_solid2, Y_solid2, [] ,Tw_solid2_SOLID , Q_flow_solid2,[]);
    T_solid2 = real(T_solid2);

    Tw_flow_solid2_s = T_solid2(end,:);  
    max_Tw_flow_solid2_s(iter) = max(Tw_flow_solid2_s);                  % Storing the max value of temp at solid side in max_Tw_flow_solid2_s vector
    max_Tw_flow_solid2_f(iter) = max(Tw_flow_solid2_f);                  % Storing the max value of temp at fluid side in max_Tw_flow_solid2_f vector

    Tw_flow_solid2 = Tw_flow_solid2_s; 


    % SOLID
    Tw_gas_SOLID_h = Tw_gas_SOLID;                                      
    Q_gas_SOLID = 1e-4.*heat_flux(10*A_t, A_t, Tw_gas_SOLID_h); 
    Q_east_SOLID = [Q_solid2_SOLID; Q_flow_SOLID; Q_solid1_SOLID];
    Q_east_SOLID([size(M_solid2,1), size(M_solid2,1)+size(M_flow,1)],:) = [];

    solid_type = "SOLID";
    Tw_SOLID_left = Tw_SOLID;
    [T_SOLID, ~, ~] = solveFVM(solid_type, M_SOLID, X_SOLID, Y_SOLID, [] ,[] , Q_gas_SOLID, Q_east_SOLID);
    T_SOLID = real(T_SOLID);

    max_Tw_SOLID_left(iter) = max(T_SOLID(:,end));                  % Storing the max value of temp at solid side in max_Tw_flow_solid2_s vector
    max_Tw_SOLID_right(iter) = max(Tw_SOLID_left);                  % Storing the max value of temp at fluid side in max_Tw_flow_solid2_f vector
    Tw_SOLID = T_SOLID(:,end);
    Tw_gas_SOLID = T_SOLID(end,:);

    subplot(2,2,1)
    plot(1:iter,max_Tw_gas_solid1_h(1:iter),'r-o',1:iter,max_Tw_gas_solid1_s(1:iter),'b-o')
    xlim([1 iter+1])
    title('Residual for Gas+Solid1 Interface')
    xlabel('Iteration','FontSize',14)
    ylabel('Wall Temperature','FontSize',14)
    legend('Hot gas side','Solid side','FontSize',14,'Location','southeast')

    subplot(2,2,2)
    plot(1:iter,max_Tw_solid1_flow_f(1:iter),'r-o',1:iter,max_Tw_solid1_flow_s(1:iter),'b-o')
    xlim([1 iter+1])
    title('Residual for Fluid+Solid1 Interface')
    xlabel('Iteration','FontSize',14)
    ylabel('Wall Temperature','FontSize',14)
    legend('Flow side','Solid side','FontSize',14,'Location','southeast')

    subplot(2,2,3)
    plot(1:iter,max_Tw_flow_solid2_s(1:iter),'r-o',1:iter,max_Tw_flow_solid2_f(1:iter),'b-o')
    xlim([1 iter+1])
    title('Residual for Fluid+Solid2 Interface')
    xlabel('Iteration','FontSize',14)
    ylabel('Wall Temperature','FontSize',14)
    legend('Solid side','Fluid side','FontSize',14,'Location','southeast')
    drawnow;
   
    subplot(2,2,4)
    plot(1:iter,max_Tw_SOLID_right(1:iter),'r-o',1:iter,max_Tw_SOLID_left(1:iter),'b-o')
    xlim([1 iter+1])
    title('Residual for left+right Interface')
    xlabel('Iteration','FontSize',14)
    ylabel('Wall Temperature','FontSize',14)
    legend('Right side','Left side','FontSize',14,'Location','southeast')
    drawnow;

    iterationStr = sprintf('%-9d', iter);
    residual1 = sprintf('%.6f', norm(Tw_gas_solid1_h - Tw_gas_solid1_s));
    residual2 = sprintf('%.6f', norm(Tw_solid1_flow_s - Tw_solid1_flow_f));
    residual3 = sprintf('%.6f', norm(Tw_flow_solid2_s - Tw_flow_solid2_f));
    residual4 = sprintf('%.6f', norm(Tw_SOLID - Tw_SOLID_left));

    fprintf('%s\t|\t%s\t|\t%s\t|\t%s\t|\t%s\n', iterationStr, residual1, residual2, residual3,residual4);


    % Checking if the solution has converged or not
    if norm(Tw_gas_solid1_h - Tw_gas_solid1_s)<eps &&...
            norm(Tw_solid1_flow_s - Tw_solid1_flow_f) <eps               
        break
    elseif iter == 100
        fprintf("Max iterations reached");
    end 
end 

    

%% Plot for the temperature distribution

X_solid2(end,:)=[];
Y_solid2(end,:)=[];
T_solid2(end,:)=[];
Y_flow(end,:)=[];
X_flow(end,:)=[];
T_flow(end,:)=[];

Y_right = [Y_solid2; Y_flow; Y_solid1];
X_right = [X_solid2; X_flow; X_solid1];
T_right = [T_solid2; T_flow; T_solid1];
Y_all = [Y_SOLID Y_right];
X_all = [X_SOLID X_right];
T_all = [T_SOLID T_right];


figure(2)
surf(X_all,Y_all,T_all,'FaceColor','interp','EdgeColor','none');
view(0,90);
ylim([min(Y_all,[],'all') max(Y_all,[],'all')]);
title('Temperature distribution','FontSize',18);
colormap("turbo");
xlabel('x','FontSize',15);
ylabel('y','FontSize',15);
colorbar;
hold on
plot3( [X_SOLID(1,1:end) (X_SOLID(1:end,end))' flip(X_SOLID(end,1:end)) flip((X_SOLID(1:end,1))')],...
    [Y_SOLID(1,1:end) (Y_SOLID(1:end,end))' flip(Y_SOLID(end,1:end)) flip((Y_SOLID(1:end,1))')],...
    5000.*ones(1,2*(size(X_SOLID,1)+size(X_SOLID,2))),'color','r','linewidth',1)
plot3( [X_solid1(1,1:end) (X_solid1(1:end,end))' flip(X_solid1(end,1:end)) flip((X_solid1(1:end,1))')],...
    [Y_solid1(1,1:end) (Y_solid1(1:end,end))' flip(Y_solid1(end,1:end)) flip((Y_solid1(1:end,1))')],...
    5000.*ones(1,2*(size(X_solid1,1)+size(X_solid1,2))),'color','r','linewidth',1)
plot3( [X_flow(1,1:end) (X_flow(1:end,end))'],...
    [Y_flow(1,1:end) (Y_flow(1:end,end))' ],...
    5000.*ones(1,(size(X_flow,1)+size(X_flow,2))),'color','r','linewidth',1)
plot3( [X_solid2(1,1:end) (X_solid2(1:end,end))' flip(X_solid2(end,1:end)) flip((X_solid2(1:end,1))')],...
    [Y_solid2(1,1:end) (Y_solid2(1:end,end))' flip(Y_solid2(end,1:end)) flip((Y_solid2(1:end,1))')],...
    5000.*ones(1,2*(size(X_solid2,1)+size(X_solid2,2))),'color','r','linewidth',1)



